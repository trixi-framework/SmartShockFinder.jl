var documenterSearchIndex = {"docs":
[{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2021-present The Trixi Authors (see https://github.com/trixi-framework/Trixi.jl)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference/#SmartShockFinder.jl-API","page":"Reference","title":"SmartShockFinder.jl API","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = SmartShockFinder","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SmartShockFinder]","category":"page"},{"location":"#SmartShockFinder.jl","page":"Home","title":"SmartShockFinder.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note: This package is in a pre-alpha stage: anything can (and will!) change at any time!","category":"page"},{"location":"","page":"Home","title":"Home","text":"SmartShockFinder.jl is used to create troubled cell indicators based on neural networks. The obtained neural networks can be used directly in Trixi.jl. For receiving the final networks, the process is separated into two parts. The creation of the training data and the subsequent training of the networks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Datasets:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The datasets are created with the functions  generate_traindataset1d(...) and generate_traindataset2d(...). The datatype is passed as first parameter. This specifies the input data X of the training datasets. A distinction is made between NNPP and NNRH (and CNN in 2d).","category":"page"},{"location":"","page":"Home","title":"Home","text":"datatype = NeuralNetworkPerssonPeraire()\nInput: The energies in lower modes as well as nnodes(dg).\ndatatype = NeuralNetworkRayHesthaven()\n1d Input: Cell average of the cell and its neighboring cells as well as the interface values.\n2d Input: Linear modal values of the cell and its neighboring cells.\nRay, Hesthaven (2018) \"An artificial neural network as a troubled-cell indicator\" doi:10.1016/j.jcp.2018.04.029\nRay, Hesthaven (2019) \"Detecting troubled-cells on two-dimensional unstructured grids using a neural network\" doi:10.1016/j.jcp.2019.07.043\ndatatype = CNN (Only in 2d) Based on convolutional neural network.\n2d Input: Interpolation of the nodal values of the indicator.variable to the 4x4 LGL nodes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As additional parameters the number of meshs and the polynomial degree are passed. In the examples/ folder, all training datasets are created once (traindata_datatyp.jl). Similarly, the generate_validdataset1d(...) (generate_validdataset2d(...)) function can be used to generate the validation datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Networks:","category":"page"},{"location":"","page":"Home","title":"Home","text":"With the obtained training datasets the neural networks can be trained. This is done with the functions train_network1d(...) and train_network2d(...) and with Flux.jl. Various parameters can be determined:","category":"page"},{"location":"","page":"Home","title":"Home","text":"η = learning rate\nβ = regularization paramater\nnumber_epochs\nSb = batch size\nL = early stopping parameter","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, the number of units in each layer can be passed. In the examples/ folder, all networks are trained once (network_datatyp.jl). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"With the trained networks the IndicatorNeuralNetwork() in Trixi.jl can be used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The references to the used networks and datasets for the indicator types are listed below:","category":"page"},{"location":"","page":"Home","title":"Home","text":"datatype = NeuralNetworkPerssonPeraire() in 1d\ntraindata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/traindata1dNNPP.h5\nvaliddata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/validdata1dNNPP.h5\nnetwork: https://gist.github.com/JuliaOd/97728c2c15d6a7255ced6e46e3a605b6/raw/modelnnpp-0.97-0.0001.bson\ndatatype = NeuralNetworkRayHesthaven() in 1d\ntraindata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/traindata1dNNRH.h5\nvaliddata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/validdata1dNNRH.h5\nnetwork: https://gist.github.com/JuliaOd/97728c2c15d6a7255ced6e46e3a605b6/raw/modelnnrh-0.95-0.009.bson\ndatatype = NeuralNetworkPerssonPeraire() in 2d\ntraindata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/traindata2dNNPP.h5\nvaliddata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/validdata2dNNPP.h5\nnetwork: https://gist.github.com/JuliaOd/97728c2c15d6a7255ced6e46e3a605b6/raw/modelnnpp-0.904-0.0005.bson\ndatatype = NeuralNetworkRayHesthaven() in 2d\ntraindata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/traindata2dNNRHs.h5\nvaliddata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/validdata2dNNRH.h5\nnetwork: https://gist.github.com/JuliaOd/97728c2c15d6a7255ced6e46e3a605b6/raw/modelnnrhs-0.973-0.001.bson\ndatatype = CNN() in 2d\ntraindata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/traindata2dCNN.h5\nvaliddata: https://gist.github.com/JuliaOd/f4d10153e539c026daf7076f087dc937/raw/validdata2dCNN.h5\nnetwork: https://gist.github.com/JuliaOd/97728c2c15d6a7255ced6e46e3a605b6/raw/modelcnn-0.964-0.001.bson","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SmartShockFinder was initiated by Michael Schlottke-Lakemper and Julia Odenthal (both University of Cologne, Germany).","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SmartShockFinder is licensed under the MIT license (see License).","category":"page"}]
}
